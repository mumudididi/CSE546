%!PS-Adobe-3.0
%%Title: polyreg.py
%%For: mumu
%%Creator: NVIM v0.4.3
%%CreationDate: Fri Apr 24 21:42:07 2020
%%DocumentData: Clean8Bit
%%Orientation: Portrait
%%Pages: (atend)
%%PageOrder: Ascend
%%BoundingBox: 59 49 564 800
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%DocumentSuppliedResources: procset VIM-Prolog 1.4 1
%%+ encoding VIM-latin1 1.0 0
%%Requirements: duplex collate color
%%EndComments
%%BeginDefaults
%%PageResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%PageMedia: A4
%%EndDefaults
%%BeginProlog
%%BeginResource: procset VIM-Prolog
%%BeginDocument: /usr/share/nvim/runtime/print/prolog.ps
%!PS-Adobe-3.0 Resource-ProcSet
%%Title: VIM-Prolog
%%Version: 1.4 1
%%EndComments
% Editing of this file is NOT RECOMMENDED.  You run a very good risk of causing
% all PostScript printing from VIM failing if you do.  PostScript is not called
% a write-only language for nothing!
/packedarray where not{userdict begin/setpacking/pop load def/currentpacking
false def end}{pop}ifelse/CP currentpacking def true setpacking
/bd{bind def}bind def/ld{load def}bd/ed{exch def}bd/d/def ld
/db{dict begin}bd/cde{currentdict end}bd
/T true d/F false d
/SO null d/sv{/SO save d}bd/re{SO restore}bd
/L2 systemdict/languagelevel 2 copy known{get exec}{pop pop 1}ifelse 2 ge d
/m/moveto ld/s/show ld /ms{m s}bd /g/setgray ld/r/setrgbcolor ld/sp{showpage}bd
/gs/gsave ld/gr/grestore ld/cp/currentpoint ld
/ul{gs UW setlinewidth cp UO add 2 copy newpath m 3 1 roll add exch lineto
stroke gr}bd
/bg{gs r cp BO add 4 -2 roll rectfill gr}bd
/sl{90 rotate 0 exch translate}bd
L2{
/sspd{mark exch{setpagedevice}stopped cleartomark}bd
/nc{1 db/NumCopies ed cde sspd}bd
/sps{3 db/Orientation ed[3 1 roll]/PageSize ed/ImagingBBox null d cde sspd}bd
/dt{2 db/Tumble ed/Duplex ed cde sspd}bd
/c{1 db/Collate ed cde sspd}bd
}{
/nc{/#copies ed}bd
/sps{statusdict/setpage get exec}bd
/dt{statusdict/settumble 2 copy known{get exec}{pop pop pop}ifelse
statusdict/setduplexmode 2 copy known{get exec}{pop pop pop}ifelse}bd
/c{pop}bd
}ifelse
/ffs{findfont exch scalefont d}bd/sf{setfont}bd
/ref{1 db findfont dup maxlength dict/NFD ed{exch dup/FID ne{exch NFD 3 1 roll
put}{pop pop}ifelse}forall/Encoding findresource dup length 256 eq{NFD/Encoding
3 -1 roll put}{pop}ifelse NFD dup/FontType get 3 ne{/CharStrings}{/CharProcs}
ifelse 2 copy known{2 copy get dup maxlength dict copy[/questiondown/space]{2
copy known{2 copy get 2 index/.notdef 3 -1 roll put pop exit}if pop}forall put
}{pop pop}ifelse dup NFD/FontName 3 -1 roll put NFD definefont pop end}bd
CP setpacking
(\004)cvn{}bd
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%BeginResource: encoding VIM-latin1
%%BeginDocument: /usr/share/nvim/runtime/print/latin1.ps
%!PS-Adobe-3.0 Resource-Encoding
%%Title: VIM-latin1
%%Version: 1.0 0
%%EndComments
/VIM-latin1[
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quotesingle
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/grave /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /periodcentered
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis]
/Encoding defineresource pop
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%EndProlog
%%BeginSetup
595 842 0 sps
1 nc
T F dt
T c
%%IncludeResource: font Courier
/_F0 /VIM-latin1 /Courier ref
/F0 10 /_F0 ffs
%%IncludeResource: font Courier-Bold
/_F1 /VIM-latin1 /Courier-Bold ref
/F1 10 /_F1 ffs
%%IncludeResource: font Courier-Oblique
/_F2 /VIM-latin1 /Courier-Oblique ref
/F2 10 /_F2 ffs
%%IncludeResource: font Courier-BoldOblique
/_F3 /VIM-latin1 /Courier-BoldOblique ref
/F3 10 /_F3 ffs
/UO -1 d
/UW 0.5 d
/BO -2.5 d
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(polyreg.py                                                                    Page 1)59.5 792.4 ms
F0 sf
0.498 0.498 0 r
(''')59.5 772.4 ms
(    Template for polynomial regression)59.5 762.4 ms
(    AUTHOR Eric Eaton, Xiaoxiang Hu)59.5 752.4 ms
(''')59.5 742.4 ms
0 g
(import numpy )59.5 722.4 ms
0.376 g
(as)s
0 g
( np)s
(import scipy.stats )59.5 712.4 ms
0.376 g
(as)s
0 g
( ss)s
0.376 0 0.376 r
(#-----------------------------------------------------------------)59.5 662.4 ms
(#  Class PolynomialRegression)59.5 652.4 ms
(#-----------------------------------------------------------------)59.5 642.4 ms
0.376 g
(class)59.5 622.4 ms
0 g
( )s
F1 sf
0.498 0.251 0.251 r
(PolynomialRegression)s
F0 sf
0 g
(:)s
(    )59.5 602.4 ms
0.376 g
(def)s
0 g
( )s
F1 sf
0.498 0.251 0.251 r
(__init__)s
F0 sf
0 g
(\(self, degree=1, reg_lambda=1E-8\):)s
(        )59.5 592.4 ms
0.498 0.498 0 r
(""")s
(        Constructor)59.5 582.4 ms
(        """)59.5 572.4 ms
0 g
(        )59.5 562.4 ms
0.376 0 0.376 r
(#)s
0 g
(TODO)s
(        self.degree = degree)59.5 552.4 ms
(        self.regLambda = reg_lambda)59.5 542.4 ms
(        self.theta = )59.5 532.4 ms
0.251 0.251 0 r
(None)s
0 g
(        self.mean= )59.5 522.4 ms
0.251 0.251 0 r
(None)s
0 g
(;)s
(        self.sd= )59.5 512.4 ms
0.251 0.251 0 r
(None)s
0 g
(;)s
(    )59.5 492.4 ms
0.376 g
(def)s
0 g
( )s
F1 sf
0.498 0.251 0.251 r
(polyfeatures)s
F0 sf
0 g
(\(self, X, degree\):)s
(        )59.5 482.4 ms
0.498 0.498 0 r
(""")s
(        Expands the given X into an n * d array of polynomial features of)59.5 472.4 ms
(            degree d.)59.5 462.4 ms
(        Returns:)59.5 442.4 ms
(            A n-by-d numpy array, with each row comprising of)59.5 432.4 ms
(            X, X * X, X ** 3, ... up to the dth power of X.)59.5 422.4 ms
(            Note that the returned matrix will not include the zero-th power.)59.5 412.4 ms
(        Arguments:)59.5 392.4 ms
(            X is an n-by-1 column numpy array)59.5 382.4 ms
(            degree is a positive integer)59.5 372.4 ms
(        """)59.5 362.4 ms
0 g
(        )59.5 342.4 ms
0.376 0 0.376 r
(# add 1s column)s
0 g
(        X_ = np.copy\(X\))59.5 332.4 ms
(        )59.5 322.4 ms
0.376 g
(for)s
0 g
(  i in )s
0.251 0.251 0 r
(range)s
0 g
(\(2,degree+1\):)s
(            X_ = np.c_[X_, np.power\(X,i\)])59.5 312.4 ms
(        )59.5 302.4 ms
0.251 0.251 0 r
(print)s
0 g
(\(X_.shape\))s
(        )59.5 292.4 ms
0.376 g
(return)s
0 g
( X_)s
(        )59.5 282.4 ms
(    )59.5 262.4 ms
0.376 g
(def)s
0 g
( )s
F1 sf
0.498 0.251 0.251 r
(fit)s
F0 sf
0 g
(\(self, X, y\):)s
(        )59.5 252.4 ms
0.498 0.498 0 r
(""")s
(            Trains the model)59.5 242.4 ms
(            Arguments:)59.5 232.4 ms
(                X is a n-by-1 array)59.5 222.4 ms
(                y is an n-by-1 array)59.5 212.4 ms
(            Returns:)59.5 202.4 ms
(                No return value)59.5 192.4 ms
(            Note:)59.5 182.4 ms
(                You need to apply polynomial expansion and scaling)59.5 172.4 ms
(                at first)59.5 162.4 ms
(        """)59.5 152.4 ms
0 g
(        )59.5 142.4 ms
0.376 0 0.376 r
(#here)s
0 g
(        X_ = self.polyfeatures\(X,self.degree\))59.5 132.4 ms
(        )59.5 122.4 ms
0.251 0.251 0 r
(print)s
0 g
(\(X_[:,1:3]\))s
(        n, d = X_.shape)59.5 112.4 ms
(        self.mean = np.mean\(X_,axis=0\))59.5 102.4 ms
(        self.sd= np.std\(X_,axis=0\))59.5 92.4 ms
(        )59.5 82.4 ms
0.376 0 0.376 r
(#end)s
0 g
(        )59.5 72.4 ms
0.376 0 0.376 r
(#####take care of  std==0 )s
0 g
(        )59.5 62.4 ms
0.376 g
(if)s
0 g
(\(self.sd.all\(\) == 0 \):)s
(            )59.5 52.4 ms
0.251 0.251 0 r
(print)s
0 g
(\()s
0.498 0.498 0 r
("ecountered 0!")s
0 g
(\))s
re sp
%%PageTrailer
%%Page: 2 2
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(polyreg.py                                                                    Page 2)59.5 792.4 ms
F0 sf
(            X_ = \(X_ - self.mean\)/self.sd)59.5 772.4 ms
(        )59.5 762.4 ms
0.376 g
(else)s
0 g
(: )s
(            )59.5 752.4 ms
0.251 0.251 0 r
(print)s
0 g
(\()s
0.498 0.498 0 r
("sd suffices")s
0 g
(\))s
(            X_ = \(X_ - self.mean\)/self.sd)59.5 742.4 ms
(            )59.5 732.4 ms
(        )59.5 722.4 ms
0.376 0 0.376 r
(# add column of 1s)s
0 g
(        X_= np.c_[np.ones\([n,1]\),X_])59.5 712.4 ms
(        )59.5 702.4 ms
(        )59.5 692.4 ms
0.376 0 0.376 r
(# construct reg matrix)s
0 g
(        reg_matrix = self.regLambda * np.eye\(d + 1\))59.5 682.4 ms
(        reg_matrix[0, 0] = 0)59.5 672.4 ms
(        )59.5 662.4 ms
(        )59.5 652.4 ms
0.376 0 0.376 r
(# analytical solution \(X'X + regMatrix\)^-1 X' y)s
0 g
(        self.theta = np.linalg.pinv\(X_.T.dot\(X_\) + reg_matrix\).dot\(X_.T\).dot\(y\))59.5 642.4 ms
(    )59.5 612.4 ms
0.376 g
(def)s
0 g
( )s
F1 sf
0.498 0.251 0.251 r
(predict)s
F0 sf
0 g
(\(self, X\):)s
(        )59.5 602.4 ms
0.498 0.498 0 r
(""")s
(        Use the trained model to predict values for each instance in X)59.5 592.4 ms
(        Arguments:)59.5 582.4 ms
(            X is a n-by-1 numpy array)59.5 572.4 ms
(        Returns:)59.5 562.4 ms
(            an n-by-1 numpy array of the predictions)59.5 552.4 ms
(        """)59.5 542.4 ms
0 g
(        )59.5 532.4 ms
0.376 0 0.376 r
(# )s
0 g
(TODO)s
(        n = )59.5 522.4 ms
0.251 0.251 0 r
(len)s
0 g
(\(X\))s
(        X_ = self.polyfeatures\(X,self.degree\))59.5 512.4 ms
(        )59.5 502.4 ms
0.376 0 0.376 r
(#X_ = \(X_ - self.mean\)/self.sd )s
0 g
(        )59.5 492.4 ms
0.376 g
(if)s
0 g
(\(self.sd.all\(\) == 0 \):)s
(            )59.5 482.4 ms
0.251 0.251 0 r
(print)s
0 g
(\()s
0.498 0.498 0 r
("ecountered 0!")s
0 g
(\))s
(            X_ = \(X_ - self.mean\)/self.sd)59.5 472.4 ms
(        )59.5 462.4 ms
0.376 g
(else)s
0 g
(: )s
(            )59.5 452.4 ms
0.251 0.251 0 r
(print)s
0 g
(\()s
0.498 0.498 0 r
("sd suffices")s
0 g
(\))s
(            X_ = \(X_ - self.mean\)/self.sd)59.5 442.4 ms
(        )59.5 432.4 ms
0.376 0 0.376 r
(# add 1s column)s
0 g
(        X_ = np.c_[np.ones\([n, 1]\), X_])59.5 422.4 ms
(        )59.5 412.4 ms
(        )59.5 402.4 ms
0.376 0 0.376 r
(# predict)s
0 g
(        )59.5 392.4 ms
0.376 g
(return)s
0 g
( X_.dot\(self.theta\))s
0.376 0 0.376 r
(#-----------------------------------------------------------------)59.5 362.4 ms
(#  End of Class PolynomialRegression)59.5 352.4 ms
(#-----------------------------------------------------------------)59.5 342.4 ms
0.376 g
(def)59.5 302.4 ms
0 g
( )s
F1 sf
0.498 0.251 0.251 r
(learningCurve)s
F0 sf
0 g
(\(Xtrain, Ytrain, Xtest, Ytest, reg_lambda, degree\):)s
(    )59.5 292.4 ms
0.498 0.498 0 r
(""")s
(    Compute learning curve)59.5 282.4 ms
(    Arguments:)59.5 262.4 ms
(        Xtrain -- Training X, n-by-1 matrix)59.5 252.4 ms
(        Ytrain -- Training y, n-by-1 matrix)59.5 242.4 ms
(        Xtest -- Testing X, m-by-1 matrix)59.5 232.4 ms
(        Ytest -- Testing Y, m-by-1 matrix)59.5 222.4 ms
(        regLambda -- regularization factor)59.5 212.4 ms
(        degree -- polynomial degree)59.5 202.4 ms
(    Returns:)59.5 182.4 ms
(        errorTrain -- errorTrain[i] is the training accuracy using)59.5 172.4 ms
(        model trained by Xtrain[0:\(i+1\)])59.5 162.4 ms
(        errorTest -- errorTrain[i] is the testing accuracy using)59.5 152.4 ms
(        model trained by Xtrain[0:\(i+1\)])59.5 142.4 ms
(    Note:)59.5 122.4 ms
(        errorTrain[0:1] and errorTest[0:1] won't actually matter, since we start dis)59.5 112.4 ms
(playing the learning curve at n = 2 \(or higher\))59.5 102.4 ms
(    """)59.5 92.4 ms
0 g
(    n = )59.5 72.4 ms
0.251 0.251 0 r
(len)s
0 g
(\(Xtrain\))s
(    errorTrain = np.zeros\(n\))59.5 52.4 ms
re sp
%%PageTrailer
%%Page: 3 3
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(polyreg.py                                                                    Page 3)59.5 792.4 ms
F0 sf
(    errorTest = np.zeros\(n\))59.5 772.4 ms
(    polyReg = PolynomialRegression\(degree,reg_lambda\))59.5 762.4 ms
(    )59.5 752.4 ms
0.376 0 0.376 r
(#)s
0 g
(TODO)s
0.376 0 0.376 r
( -- complete rest of method; errorTrain and errorTest are already the corre)s
(ct shape)59.5 742.4 ms
0 g
(        )59.5 732.4 ms
0.376 0 0.376 r
(#X_curr_test=np.copy\(Xtest\))s
0 g
(        )59.5 722.4 ms
0.376 0 0.376 r
(#Y_curr_test=np.copy\(Ytest\))s
0 g
(    )59.5 712.4 ms
0.376 g
(for)s
0 g
( i in )s
0.251 0.251 0 r
(range)s
0 g
(\(2,n\):)s
(        )59.5 702.4 ms
(        X_curr_train = np.copy\(Xtrain[0:i+1]\))59.5 692.4 ms
(        Y_curr_train = np.copy\(Ytrain[0:i+1]\))59.5 682.4 ms
(        )59.5 672.4 ms
(        )59.5 662.4 ms
(        polyReg.fit\(X_curr_train,Y_curr_train\))59.5 652.4 ms
(        )59.5 642.4 ms
(        res_train =polyReg.predict\(X_curr_train\))59.5 632.4 ms
(        res_test = polyReg.predict\(Xtest\))59.5 622.4 ms
(        n_train = )59.5 612.4 ms
0.251 0.251 0 r
(len)s
0 g
(\(X_curr_train\))s
(        n_test = )59.5 602.4 ms
0.251 0.251 0 r
(len)s
0 g
(\(Xtest\))s
(        errorTrain[i]= 1/n_train * np.power\(np.subtract\(res_train,Y_curr_train\),2\).s)59.5 592.4 ms
(um\(\);)59.5 582.4 ms
(        errorTest[i]= 1/n_test * np.power\(np.subtract\(res_test, Ytest\),2\).sum\(\) ;)59.5 572.4 ms
(    )59.5 542.4 ms
0.376 g
(return)s
0 g
( errorTrain, errorTest)s
re sp
%%PageTrailer
%%Trailer
%%Pages: 3
%%EOF
